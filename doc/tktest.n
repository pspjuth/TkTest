'\"
'\" Generated from file 'doc/tktest.man' by tcllib/doctools with format 'nroff'
'\" Copyright (c) 2007-2008 Peter Spjuth
'\"
'\" The definitions below are for supplemental macros used in Tcl/Tk
'\" manual entries.
'\"
'\" .AP type name in/out ?indent?
'\"	Start paragraph describing an argument to a library procedure.
'\"	type is type of argument (int, etc.), in/out is either "in", "out",
'\"	or "in/out" to describe whether procedure reads or modifies arg,
'\"	and indent is equivalent to second arg of .IP (shouldn't ever be
'\"	needed;  use .AS below instead)
'\"
'\" .AS ?type? ?name?
'\"	Give maximum sizes of arguments for setting tab stops.  Type and
'\"	name are examples of largest possible arguments that will be passed
'\"	to .AP later.  If args are omitted, default tab stops are used.
'\"
'\" .BS
'\"	Start box enclosure.  From here until next .BE, everything will be
'\"	enclosed in one large box.
'\"
'\" .BE
'\"	End of box enclosure.
'\"
'\" .CS
'\"	Begin code excerpt.
'\"
'\" .CE
'\"	End code excerpt.
'\"
'\" .VS ?version? ?br?
'\"	Begin vertical sidebar, for use in marking newly-changed parts
'\"	of man pages.  The first argument is ignored and used for recording
'\"	the version when the .VS was added, so that the sidebars can be
'\"	found and removed when they reach a certain age.  If another argument
'\"	is present, then a line break is forced before starting the sidebar.
'\"
'\" .VE
'\"	End of vertical sidebar.
'\"
'\" .DS
'\"	Begin an indented unfilled display.
'\"
'\" .DE
'\"	End of indented unfilled display.
'\"
'\" .SO
'\"	Start of list of standard options for a Tk widget.  The
'\"	options follow on successive lines, in four columns separated
'\"	by tabs.
'\"
'\" .SE
'\"	End of list of standard options for a Tk widget.
'\"
'\" .OP cmdName dbName dbClass
'\"	Start of description of a specific option.  cmdName gives the
'\"	option's name as specified in the class command, dbName gives
'\"	the option's name in the option database, and dbClass gives
'\"	the option's class in the option database.
'\"
'\" .UL arg1 arg2
'\"	Print arg1 underlined, then print arg2 normally.
'\"
'\" RCS: @(#) $Id: man.macros,v 1.1 2009/01/30 04:56:47 andreas_kupries Exp $
'\"
'\"	# Set up traps and other miscellaneous stuff for Tcl/Tk man pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
'\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1	\\fI\\$2\\fP	(\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
'\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
'\"	# BS - start boxed text
'\"	# ^y = starting y location
'\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
'\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
'\"	# VS - start vertical sidebar
'\"	# ^Y = starting y location
'\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
'\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
'\"	# Special macro to handle page bottom:  finish off current
'\"	# box/sidebar if in box/sidebar mode, then invoked standard
'\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
'\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
'\"	# DE - end display
.de DE
.fi
.RE
.sp
..
'\"	# SO - start of list of standard options
.de SO
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 4c 8c 12c
.ft B
..
'\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See the \\fBoptions\\fR manual entry for details on the standard options.
..
'\"	# OP - start of full description for a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
'\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
'\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.de UL
\\$1\l'|0\(ul'\\$2
..
.TH "tktest" n 0.2 tktest "Test Tcl/Tk applications"
.BS
.SH NAME
tktest \- Test Tcl/Tk applications
.SH SYNOPSIS
package require \fBTk \fR
.sp
package require \fBtktest  ?0.2?\fR
.sp
\fB::tktest::init\fR \fIappName\fR
.sp
\fB::tktest::widget\fR ?\fIoption value\fR...?
.sp
\fB::tktest::cmd\fR \fIcommand\fR ?\fIarg\fR...?
.sp
\fB::tktest::press\fR \fItext\fR ?\fIpos\fR?
.sp
\fB::tktest::coord\fR \fIwidget\fR ?\fIcommand\fR \fIarg\fR...?
.sp
\fB::tktest::menu\fR ?\fIpattern\fR...?
.sp
\fB::tktest::mouse\fR \fIbutton\fR \fIx\fR ?\fIy\fR?
.sp
\fB::tktest::key\fR \fIsymbol\fR ?\fImodifier\fR?
.sp
\fB::tktest::keys\fR \fIstring\fR
.sp
\fB::tktest::waitFocus\fR \fIcmd\fR ?\fIarg\fR...?
.sp
\fB::tktest::contextMenu\fR \fIcoord\fR ?\fIpattern\fR...?
.sp
.BE
.SH DESCRIPTION
This package provides helpers for testing Tcl/Tk GUIs.
.PP
The mechanism for testing is the \fBsend\fR command, so the environment
and the application to be tested must allow \fBsend\fR.
All client commands take the optional argument \fI-async\fR,
which causes it to use the asynchronous version of \fBsend\fR.
.SH "PUBLIC API"
.TP
\fB::tktest::init\fR \fIappName\fR
This command initializes the tktest package to test an application.
.sp
The \fIappName\fR must identify the application to be tested in a way
that works with \fBsend\fR.
.sp
If the application is restarted, \fB::tktest::init\fR must be called
again to redo the initializatons needed in the application.
After \fB::tktest::init\fR has been called, all other commands
will go to that application.
.PP
.SS "CLIENT COMMANDS"
.TP
\fB::tktest::widget\fR ?\fIoption value\fR...?
Locate a widget in the application.
.RS
.TP
\fB-class\fR \fIpattern\fR
The widget's class must match \fIpattern\fR.
.TP
\fB-text\fR \fIpattern\fR
The widget's text or label must match \fIpattern\fR.
.TP
\fB-pos\fR \fInumber\fR
If more than one widget is eligible, they are numbered left-right top-down.
A number must then be given to identify which is meant.
.TP
\fB-eval\fR \fItail\fR
If \fB-eval\fR is given, a command is evaluated on the widget and the
result is returned instead of the widget name. The command evaluated
is [uplevel e#0 $widget $tail].
.RE
.TP
\fB::tktest::cmd\fR \fIcommand\fR ?\fIarg\fR...?
Execute a command within the client.
.TP
\fB::tktest::press\fR \fItext\fR ?\fIpos\fR?
Press a button.  The button is identified by \fItext\fR and \fIpos\fR,
which are equivalent to \fB::tktest::widget\fR's \fB-text\fR and
\fB-pos\fR.
Any widget with an invoke command can be used.
.TP
\fB::tktest::coord\fR \fIwidget\fR ?\fIcommand\fR \fIarg\fR...?
Find coordinates for a widget.
If no extra arguments are given, the center of the widget is returned as a list of x/y, relative to the widget's toplevel.
Any extra arguments are called as a subcommand on the widget
to ask for a coordinate or bounding box.
A coordinate is returned as is.  A bounding box is assumed to be relative to
the widget and the center of the box is returned, relative to the widget's toplevel.
.TP
\fB::tktest::menu\fR ?\fIpattern\fR...?
Invoke a menu.
Each argument is a glob pattern describing a menu element's label.
All entries but the last should be cascades.
.TP
\fB::tktest::mouse\fR \fIbutton\fR \fIx\fR ?\fIy\fR?
Mouse click at a coordinate.
The mouse button is selected by \fIbutton\fR which is either a number, "left"
or "right". If \fIy\fR is not given, \fIx\fR may be a two element list.
Coordinates are relative to current toplevel.
.TP
\fB::tktest::key\fR \fIsymbol\fR ?\fImodifier\fR?
Generate a key event.
.TP
\fB::tktest::keys\fR \fIstring\fR
Generate a series of key events, one for each char in \fIstring\fR.
Currently all alphanumeric chars, space and newline are supported.
.PP
.SS "HELPER COMMANDS"
.TP
\fB::tktest::waitFocus\fR \fIcmd\fR ?\fIarg\fR...?
Execute a client command and wait for a focus change in the application.
This is used for buttons or menus that create a dialog or other new window.
.TP
\fB::tktest::contextMenu\fR \fIcoord\fR ?\fIpattern\fR...?
Invoke a context menu by right clicking at a coordinate, invoke the menu
and dismiss the menu. The coordinate is a two element x/y list.
The patterns describe the menu as in \fB::tktest::menu\fR.
.PP
.SH EXAMPLES
.nf

  tktest::init MyApp
  # Press button labeled "Run"
  tktest::press Run
  # Select Menu entry "Exit" in menu "File"
  tktest::menu File Exit
  # Right click mouse over the listbox's second element and select
  # the Delete entry from the popup menu.
  set w [tktest::widget -class Listbox]
  set c [tktest::coord $w bbox 1]
  tktest::mouse right $c
  tktest::menu "Delete"
  tktest::key Escape
  # The above can also be done with this
  tktest::contextMenu $c "Delete"
  # Read the text from the first Label in the window
  set t [tktest::widget -class Label -pos 0 -eval "cget -text"]
  # Type an A at the end of the entry
  tktest::cmd focus [tktest::widget -class Entry]
  tktest::key End
  tktest::key A


.fi
.SH "SEE ALSO"
tcltest
.SH KEYWORDS
gui, testing
.SH COPYRIGHT
.nf
Copyright (c) 2007-2008 Peter Spjuth

.fi